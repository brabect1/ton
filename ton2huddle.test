# Copyright 2022 Tomas Brabec
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
#     
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package require tcltest 2.0
namespace import ::tcltest::*

# ==================================================
# Setup
# ==================================================
verbose {pass error}

source [file join \
     [file dirname [file join [pwd] [info script]]] \
     ton2huddle.tcl]


# ==================================================
# tests ported from huddle.test
# ==================================================
namespace eval ton::2huddle::test {

    test ton2huddle-1.1 "test of simple (1-level) dict" -body {
        set upper {o a [s b] c [s d]};
        set h [ton::2huddle::ton2huddle $upper];
    } -result {HUDDLE {D {a {s b} c {s d}}}}

    test ton2huddle-1.2 "test of 2-level dict" -body {
        set upper2 {o e [s f] g [s h]};
        set upper3 {o i [s j] k [s l]};
        set folding [concat o bb "\[$upper\]" cc "\[$upper2\]"];
        set h [ton::2huddle::ton2huddle $folding];
    } -result {HUDDLE {D {bb {D {a {s b} c {s d}}} cc {D {e {s f} g {s h}}}}}}

    test ton2huddle-1.3 "test of 3-level dict" -body {
        set folding [concat o dd "\[$folding\]" ee "\[$upper3\]"];
        set h [ton::2huddle::ton2huddle $folding];
    } -result {HUDDLE {D {dd {D {bb {D {a {s b} c {s d}}} cc {D {e {s f} g {s h}}}}} ee {D {i {s j} k {s l}}}}}}

    test ton2huddle-2.1 "test of simple (1-level) list" -body {
        set upper {a [s a] [s b] [s c] [s d]}
        set h [ton::2huddle::ton2huddle $upper];
    } -result {HUDDLE {L {{s a} {s b} {s c} {s d}}}}

    test ton2huddle-2.2 "test of 2-level list" -body {
        set upper2 {a [s e] [s f] [s g] [s h]};
        set folding [concat a {[s i]} "\[$upper\]" {[s j]} {[s k]} "\[$upper2\]"];
        set h [ton::2huddle::ton2huddle $folding];
    } -result {HUDDLE {L {{s i} {L {{s a} {s b} {s c} {s d}}} {s j} {s k} {L {{s e} {s f} {s g} {s h}}}}}}

    test ton2huddle-2.3 "test of 3-level list" -body {
        set folding [concat a "\[$folding\]" {[s t]} {[s u]}];
        set h [ton::2huddle::ton2huddle $folding];
    } -result {HUDDLE {L {{L {{s i} {L {{s a} {s b} {s c} {s d}}} {s j} {s k} {L {{s e} {s f} {s g} {s h}}}}} {s t} {s u}}}}

    test ton2huddle-5.1 "test of boolean" -body {
        set h [ton::2huddle::ton2huddle {l true}];
    } -result {HUDDLE {b true}}

    test ton2huddle-5.2 "test of boolean" -body {
        set h [ton::2huddle::ton2huddle {l false}];
    } -result {HUDDLE {b false}}

    test ton2huddle-6.1 "test of null" -body {
        set h [ton::2huddle::ton2huddle {l null}];
    } -result {HUDDLE null}

    test ton2huddle-7.1 "test of number" -body {
        set h [ton::2huddle::ton2huddle {d -4.5E-6}];
    } -result {HUDDLE {num -4.5E-6}}

    test ton2huddle-7.2 "test of number" -body {
        set h [ton::2huddle::ton2huddle {i 5}];
    } -result {HUDDLE {num 5}}

    test ton2huddle-8.1 "test of complex data structure using the new types: number, boolean and null" -body {
        set ton {o key1 [s var1] key2 [d 4] key3 [a [l null] [s sadf] [l true]]};
        set h [ton::2huddle::ton2huddle $ton];
    } -result {HUDDLE {D {key1 {s var1} key2 {num 4} key3 {L {null {s sadf} {b true}}}}}}
}


# ==================================================
# tests ported from json2huddle.test
# ==================================================
namespace eval ton::2huddle::test {
    test json2ton2huddle-1.1 "test of parsing json string" -setup {
        set json { "hello world" };
    } -body {
	    set ton [ton::json2ton $json];
        set h [ton::2huddle::ton2huddle $ton];
    } -result {HUDDLE {s {hello world}}}

    # this is like `json2ton2huddle-1.1` but uses the actual result of
    # `huddle::json::json2huddle` than a hard-coded string
    test json2ton2huddle-1.1-alt "test of parsing json string" -setup {
        package require huddle::json;
        set json { "hello world" };
    } -body {
	    set ton [ton::json2ton $json];
        set h [ton::2huddle::ton2huddle $ton];
    } -result [package require huddle::json; huddle::json::json2huddle parse $json]

    test json2ton2huddle-1.2 "test of parsing json string" -setup {
        set json { "Unicode characters: \u00e0\u00e8\u00ec\u00f2\u00f9\u00e1\u00e9\u00ed\u00f3\u00fa\u00e4\u00eb\u00ef\u00f6\u00fc" } 
    } -body {
        #package require huddle::json;
        #huddle::json::json2huddle parse $json
	    set ton [ton::json2ton $json];
        set h [ton::2huddle::ton2huddle $ton];
    } -result {HUDDLE {s {Unicode characters: àèìòùáéíóúäëïöü}}}

    test json2ton2huddle-1.3 "test of parsing json string" -setup {
        set json { "escaped tab:\tescaped quote \"" } 
    } -body {
	    set ton [ton::json2ton $json];
        set h [ton::2huddle::ton2huddle $ton];
    } -result {HUDDLE {s {escaped tab:	escaped quote "}}}

    test json2ton2huddle-2.1 "test of parsing json number" -setup {
        set json { 4 } 
    } -body {
	    set ton [ton::json2ton $json];
        set h [ton::2huddle::ton2huddle $ton];
    } -result {HUDDLE {num 4}}

    test json2ton2huddle-2.2 "test of parsing json number" -setup {
        set json { 2.7 } 
    } -body {
	    set ton [ton::json2ton $json];
        set h [ton::2huddle::ton2huddle $ton];
    } -result {HUDDLE {num 2.7}}

    test json2ton2huddle-2.3 "test of parsing json number" -setup {
        set json { -2.7e6 } 
    } -body {
	    set ton [ton::json2ton $json];
        set h [ton::2huddle::ton2huddle $ton];
    } -result {HUDDLE {num -2.7e6}}

    test json2ton2huddle-2.3 "test of parsing json number" -setup {
        set json { 2345E-4 } 
    } -body {
	    set ton [ton::json2ton $json];
        set h [ton::2huddle::ton2huddle $ton];
    } -result {HUDDLE {num 2345E-4}}

    test json2ton2huddle-3.1 "test of parsing json boolean" -setup {
        set json { true } 
    } -body {
	    set ton [ton::json2ton $json];
        set h [ton::2huddle::ton2huddle $ton];
    } -result {HUDDLE {b true}}

    test json2ton2huddle-3.1 "test of parsing json boolean" -setup {
        set json { false } 
    } -body {
	    set ton [ton::json2ton $json];
        set h [ton::2huddle::ton2huddle $ton];
    } -result {HUDDLE {b false}}

    test json2ton2huddle-4.1 "test of parsing json null" -setup {
        set json { null } 
    } -body {
	    set ton [ton::json2ton $json];
        set h [ton::2huddle::ton2huddle $ton];
    } -result {HUDDLE null}

    test json2ton2huddle-5.1 "test of parsing json array" -setup {
        set json { [1,2, "3", 4, null, false] } 
    } -body {
	    set ton [ton::json2ton $json];
        set h [ton::2huddle::ton2huddle $ton];
    } -result {HUDDLE {L {{num 1} {num 2} {s 3} {num 4} null {b false}}}}

    test json2ton2huddle-5.2 "test of parsing json array" -setup {
        set json { [ ] } 
    } -body {
	    set ton [ton::json2ton $json];
        set h [ton::2huddle::ton2huddle $ton];
    } -result {HUDDLE {L {}}}

    test json2ton2huddle-6.1 "test of parsing json dict" -setup {
        set json {  {"key1":"value1", "key2": 0, "key3": true,"key4":null} } 
    } -body {
	    set ton [ton::json2ton $json];
        set h [ton::2huddle::ton2huddle $ton];
    } -result {HUDDLE {D {key1 {s value1} key2 {num 0} key3 {b true} key4 null}}}

    test json2ton2huddle-6.2 "test of parsing json dict" -setup {
        set json {  {  } } 
    } -body {
	    set ton [ton::json2ton $json];
        set h [ton::2huddle::ton2huddle $ton];
    } -result {HUDDLE {D {}}}

##---->>>> 6-Aug-2022: Comments are not part of JSON standard notation. They
##         are a specific feature of `::huddle::json`.
#    test json2ton2huddle-7.1 "test of parsing json comments" -setup {
#    	set json { 
#    		// this is a solidus double comment
#    		 "this is a string"
#    	}
#    } -body {
#	    set ton [ton::json2ton $json];
#        set h [ton::2huddle::ton2huddle $ton];
#    } -result {HUDDLE {s {this is a string}}}
#
#    test json2ton2huddle-7.2 "test of parsing json comments" -setup {
#    	set json { 
#    		/* c style
#    				comment 
#    				*/
#    		 "this is a string"
#    	}
#    } -body {
#	    set ton [ton::json2ton $json];
#        set h [ton::2huddle::ton2huddle $ton];
#    } -result {HUDDLE {s {this is a string}}}
#
#    test json2ton2huddle-7.2 "test of parsing json comments" -setup {
#    	set json { 
#    		/* c style
#    				comment 
#    				*/
#    				// this is a solidus double comment
#    		 "this is a string"
#    		 /* c style comment */
#    		// this is a solidus double comment
#    	}
#    } -body {
#	    set ton [ton::json2ton $json];
#        set h [ton::2huddle::ton2huddle $ton];
#    } -result {HUDDLE {s {this is a string}}}
#
#    test json2ton2huddle-7.4 "test of parsing json comments" -setup {
#    	set json { 
#    		// this is a solidus double comment
#    		[
#    				//another comment here
#    			[], 
#    			{}, 
#    			/* c style
#    				comment 
#    				*/
#    		
#    		null, false, true,
#    		 -5.0e-4]
#    	}
#    } -body {
#	    set ton [ton::json2ton $json];
#        set h [ton::2huddle::ton2huddle $ton];
#    } -result {HUDDLE {L {{L {}} {D {}} null {b false} {b true} {num -5.0e-4}}}}
##<<<<----

    test json2ton2huddle-8.1 "test of parsing complex data structures in json" -setup {
    	set json {  
        
    		{"menu1": {
    				"id": 234,
    				"value": "File:",
    				"unival": "\u6021:",
    				"popup": {
    					"menuitem": [
    						{"value": "Open", "onclick": "OpenDoc()"},
    						{"value": "Close", "onclick": "CloseDoc()"}
    						]
    				}
    			},
    		"menu2": {
    				"selected": true,
    				"texts": ["open", "close", "save as.."]
    			
    			}
        
    		} 
    	}
    } -body {
	    set ton [ton::json2ton $json];
        set h [ton::2huddle::ton2huddle $ton];
    } -result {HUDDLE {D {menu1 {D {id {num 234} value {s File:} unival {s 怡:} popup {D {menuitem {L {{D {value {s Open} onclick {s OpenDoc()}}} {D {value {s Close} onclick {s CloseDoc()}}}}}}}}} menu2 {D {selected {b true} texts {L {{s open} {s close} {s {save as..}}}}}}}}}

    # This test gets different result than `::huddle::json2huddle`, which throws
    # an error. `json2ton` gets an empty TON structure and hence a subsequent
    # `ton2huddle` gets an empty HUDDLE structure.
    test json2ton2huddle-9.1 "test of no json" -setup {
    	set json { }
    } -body {
	    set ton [ton::json2ton $json];
        set h [ton::2huddle::ton2huddle $ton];
    } -result {HUDDLE {}}

}


# ==================================================
# reverse tests for those of huddle2ton
# ==================================================
namespace eval ton::2huddle::test {

    test huddle2ton-1.1 "test of simple (1-level) dict" -body {
        set h {HUDDLE {D {a {s b} c {s d}}}};
        set ton [ton::2huddle::huddle2ton $h];
    } -result {o a [s b] c [s d]}

    test huddle2ton-1.2 "test of 2-level dict" -body {
        set h {HUDDLE {D {bb {D {a {s b} c {s d}}} cc {D {e {s f} g {s h}}}}}};
        set ton [ton::2huddle::huddle2ton $h];
    } -result {o bb [o a [s b] c [s d]] cc [o e [s f] g [s h]]}

    test huddle2ton-1.3 "test of 3-level dict" -body {
        set h {HUDDLE {D {dd {D {bb {D {a {s b} c {s d}}} cc {D {e {s f} g {s h}}}}} ee {D {i {s j} k {s l}}}}}};
        set ton [ton::2huddle::huddle2ton $h];
    } -result {o dd [o bb [o a [s b] c [s d]] cc [o e [s f] g [s h]]] ee [o i [s j] k [s l]]}

    test huddle2ton-2.1 "test of simple (1-level) list" -body {
        set h {HUDDLE {L {{s a} {s b} {s c} {s d}}}};
        set ton [ton::2huddle::huddle2ton $h];
    } -result {a [s a] [s b] [s c] [s d]}

    test huddle2ton-2.2 "test of 2-level list" -body {
        set h {HUDDLE {L {{s i} {L {{s a} {s b} {s c} {s d}}} {s j} {s k} {L {{s e} {s f} {s g} {s h}}}}}};
        set ton [ton::2huddle::huddle2ton $h];
    } -result {a [s i] [a [s a] [s b] [s c] [s d]] [s j] [s k] [a [s e] [s f] [s g] [s h]]}

    test huddle2ton-2.3 "test of 3-level list" -body {
        set h {HUDDLE {L {{L {{s i} {L {{s a} {s b} {s c} {s d}}} {s j} {s k} {L {{s e} {s f} {s g} {s h}}}}} {s t} {s u}}}};
        set ton [ton::2huddle::huddle2ton $h];
    } -result {a [a [s i] [a [s a] [s b] [s c] [s d]] [s j] [s k] [a [s e] [s f] [s g] [s h]]] [s t] [s u]}

    test huddle2ton-5.1 "test of boolean" -body {
        set h {HUDDLE {b true}};
        set ton [ton::2huddle::huddle2ton $h];
    } -result {l true}

    test huddle2ton-5.2 "test of boolean" -body {
        set h {HUDDLE {b false}};
        set ton [ton::2huddle::huddle2ton $h];
    } -result {l false}

    test huddle2ton-6.1 "test of null" -body {
        set h {HUDDLE null};
        set ton [ton::2huddle::huddle2ton $h];
    } -result {l null}

    test huddle2ton-7.1 "test of number" -body {
        set h {HUDDLE {num -4.5E-6}};
        set ton [ton::2huddle::huddle2ton $h];
    } -result {d -4.5E-6}

    test huddle2ton-7.2 "test of number" -body {
        set h {HUDDLE {num 5}};
        set ton [ton::2huddle::huddle2ton $h];
    } -result {d 5}

    test huddle2ton-8.1 "test of complex data structure using the new types: number, boolean and null" -body {
        set h {HUDDLE {D {key1 {s var1} key2 {num 4} key3 {L {null {s sadf} {b true}}}}}};
        set ton [ton::2huddle::huddle2ton $h];
    } -result {o key1 [s var1] key2 [d 4] key3 [a [l null] [s sadf] [l true]]}

}


# ==================================================
# Teardown
# ==================================================
namespace eval ton::2huddle::test {
    cleanupTests
}

namespace delete ::ton::2huddle::test


## set ton {o a [o b [s c]] 1 [o 2 [s 3]]}
## puts "$ton";
## set h [ton::2huddle::ton2huddle $ton];
## puts "$h";
